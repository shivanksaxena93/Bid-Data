import java.io.IOException;

import com.cloudera.sqoop.lib.RecordParser.ParseError;

import org.apache.hadoop.conf.*;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.*;

public class AverageRecordTemperature extends Configured implements Tool {

  public static class AverageRecordMapper
      extends Mapper<LongWritable, Text, IntWritable, IntWritable> {

    private Record averageRecord = null;

    public void map(LongWritable k, Text v, Context context) {
      Record record = new Record();
      try {
        record.parse(v); // Auto-generated: parse all fields from text.
      } catch (ParseError pe) {
        return;
      }

      Integer temp ;
                Integer year =1985;
          String temp_str = record.get_temp();
          temp = Integer.parseInt(temp_str);
          try{
      context.write(new IntWritable(year), new IntWritable(temp));
          }catch(Exception e){
          }
    }



  }

  public static class AverageRecordReducer
      extends Reducer<IntWritable, IntWritable, IntWritable, FloatWritable> {
 public void reduce(IntWritable k, Iterable<IntWritable> vals, Context context)
        throws IOException, InterruptedException {
      Record averageRecord = null;
"AverageRecordTemperature.java" 97L, 2794C                                                                                                                                                       1,0-1         Top


                Integer year = 1985;
                        Integer sum = 0;
                        Integer cnt = 0;

                        for (IntWritable value:vals) {
                                sum = sum + value.get();
                                cnt = cnt + 1;
                        }

                        Float avg_m = (float) sum/cnt;
                        context.write(new IntWritable(year), new FloatWritable(avg_m));
  }

  }

  public int run(String [] args) throws Exception {
    Job job = new Job(getConf());

    job.setJarByClass(AverageRecordTemperature.class);

    job.setMapperClass(AverageRecordMapper.class);
    job.setReducerClass(AverageRecordReducer.class);

    FileInputFormat.addInputPath(job, new Path("records_output"));
    FileOutputFormat.setOutputPath(job, new Path("averagerecord"));

    job.setMapOutputKeyClass(IntWritable.class);
    job.setMapOutputValueClass(IntWritable.class);

    job.setOutputKeyClass(IntWritable.class);
    job.setOutputValueClass(FloatWritable.class);

    job.setNumReduceTasks(1);

    if (!job.waitForCompletion(true)) {
      return 1; // error.
    }

    return 0;
  }

  public static void main(String [] args) throws Exception {
    int ret = ToolRunner.run(new AverageRecordTemperature(), args);
    System.exit(ret);
  }
}
